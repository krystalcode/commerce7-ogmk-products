<?php
/**
 * @file
 * Code for the Commerce Marketplace Products feature.
 */

include_once 'ogmk_products.features.inc';

/**
 * Hooks.
 */

/**
 * Implements hook_theme().
 */
function ogmk_products_theme($existing, $type, $theme, $path) {
  return array(
    'user_orders_page' => array(
      'variables' => array('variables' => NULL),
      'template'  => 'templates/pages/user-orders',
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function ogmk_products_entity_info_alter(&$entity_info) {
  /**
   * @Issue(
   *   "Maybe this should be moved to a base ogmk module"
   *   type="task"
   *   priority="low"
   *   labels="modularity"
   * )
   */
  $entity_info['node']['view modes']['ogmk_bootstrap_media'] = array(
    'label' => t('OGMK Bootstrap Media'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_commerce_line_item_type_info().
 *
 * Provides a custom line item type for 'ogmk_product' products.
 */
function ogmk_products_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['ogmk_product'] = array(
    'name' => t('Product'),
    'description' => t('Line item for OGMK products'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add product'),
    'base' => 'commerce_product_line_item',
  );

  return $line_item_types;
}

/**
 * Public API.
 */

/**
 * @param int|object $product
 *   The product id or object for whom to check if there is a referencing node.
 * @param string $node_type
 *   The node type to look for.
 *
 * @return int
 *   Zero (0) if there is no node referencing the product.
 *   The node's id otherwise.
 */
function ogmk_products_product_has_node($product, $node_type = 'ogmk_product') {
  $productId = NULL;
  if (is_int($product)) {
    $productId = $product;
  } else {
    $productId = $product->product_id;
  }

  // Get the "product" node that corresponds to the given "commerce_product"
  // entity.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('type', $node_type)
    ->fieldCondition('ogmk_products_ref', 'product_id', $productId, '=');
  $result = $query->execute();

  if (empty($result['node'])) {
    return 0;
  }

  // Get the first key of the result array because there should be only one
  // result.
  return key($result['node']);
}

/**
 * @param int|object $product
 *   The product id or object for whom to check if there is a referencing node.
 * @param string $node_type
 *   The node type to look for.
 *
 * @return null|object
 *   NULL if there is no node referencing the product.
 *   The node's object otherwise.
 */
function ogmk_products_product_get_node($product, $node_type = 'ogmk_product') {
  $nodeId = ogmk_products_product_has_node($product, $node_type);

  if ($nodeId) {
    return node_load($nodeId);
  }

  return NULL;
}

/**
 * Functions for internal use.
 */
